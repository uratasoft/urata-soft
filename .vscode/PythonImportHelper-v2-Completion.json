[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "answer_question",
        "importPath": "search",
        "description": "search",
        "isExtraImport": true,
        "detail": "search",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "distances_from_embeddings",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "winsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winsound",
        "description": "winsound",
        "detail": "winsound",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "schedule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schedule",
        "description": "schedule",
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "gpt_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gpt_api",
        "description": "gpt_api",
        "detail": "gpt_api",
        "documentation": {}
    },
    {
        "label": "twitter_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "twitter_api",
        "description": "twitter_api",
        "detail": "twitter_api",
        "documentation": {}
    },
    {
        "label": "tweepy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tweepy",
        "description": "tweepy",
        "detail": "tweepy",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "facebook-chatbot.app",
        "description": "facebook-chatbot.app",
        "peekOfCode": "def send_message(recipient_id, text):\n    \"\"\"Facebook Messenger に自動返信を送る\"\"\"\n    url = f\"https://graph.facebook.com/v19.0/me/messages?access_token={PAGE_ACCESS_TOKEN}\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"recipient\": {\"id\": recipient_id},\n        \"message\": {\"text\": text}\n    }\n    response = requests.post(url, json=payload, headers=headers)\n    print(\"📩 送信結果:\", response.status_code, response.text)  # デバッグ用に送信結果を表示",
        "detail": "facebook-chatbot.app",
        "documentation": {}
    },
    {
        "label": "verify_webhook",
        "kind": 2,
        "importPath": "facebook-chatbot.app",
        "description": "facebook-chatbot.app",
        "peekOfCode": "def verify_webhook():\n    \"\"\"Facebook Webhook の認証処理\"\"\"\n    VERIFY_TOKEN = \"1403ad4e4d93d83d317b3a6fbe5d14f1\"  # ここに Webhook の検証トークンを設定\n    mode = request.args.get(\"hub.mode\")\n    token = request.args.get(\"hub.verify_token\")\n    challenge = request.args.get(\"hub.challenge\")\n    if mode == \"subscribe\" and token == VERIFY_TOKEN:\n        print(\"✅ Webhook Verified!\")  # Webhook 認証成功\n        return challenge, 200\n    else:",
        "detail": "facebook-chatbot.app",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "facebook-chatbot.app",
        "description": "facebook-chatbot.app",
        "peekOfCode": "def webhook():\n    \"\"\"Facebook Messenger からのメッセージ受信処理\"\"\"\n    data = request.get_json()\n    # 🔹 メッセージが送られた場合の処理\n    messaging_event = data.get(\"entry\", [{}])[0].get(\"messaging\", [{}])[0]\n    sender_id = messaging_event.get(\"sender\", {}).get(\"id\")  # 送信者のID\n    message_text = messaging_event.get(\"message\", {}).get(\"text\", \"\")\n    if sender_id and message_text:\n        print(f\"📩 受信: {sender_id} から「{message_text}」\")\n        send_message(sender_id, f\"あなたのメッセージ: 「{message_text}」 を受け取りました！\")  # 自動返信",
        "detail": "facebook-chatbot.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "facebook-chatbot.app",
        "description": "facebook-chatbot.app",
        "peekOfCode": "app = Flask(__name__)\n# 🔹 Facebook の「ページアクセストークン」を設定（あなたのものに置き換えてください！）\nPAGE_ACCESS_TOKEN = \"EAAOhc6h5nBABOxTTixCeGLdvZBvU7ckBUJSIVwlBfmSZAfeonLm9y0NfoFrDArahJNZCm47JgiBrdIyRebdYlwckZCMRoPx4ZA2gvzOClsJ5GZCBZAjWAmYEshRje4SF3vx4BpR91qPDdHsOu3CHeWUijuRGXex8yXZAgsdEjBi3VqGdTsCXAK6D7A5ZCs8qxsSoO1GtAQK1OMp4LguRZBK9gxCnZAnGR34uEBF3aAKtnehDQYZD\"  # ここにあなたのページアクセストークンを入力\ndef send_message(recipient_id, text):\n    \"\"\"Facebook Messenger に自動返信を送る\"\"\"\n    url = f\"https://graph.facebook.com/v19.0/me/messages?access_token={PAGE_ACCESS_TOKEN}\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"recipient\": {\"id\": recipient_id},\n        \"message\": {\"text\": text}",
        "detail": "facebook-chatbot.app",
        "documentation": {}
    },
    {
        "label": "PAGE_ACCESS_TOKEN",
        "kind": 5,
        "importPath": "facebook-chatbot.app",
        "description": "facebook-chatbot.app",
        "peekOfCode": "PAGE_ACCESS_TOKEN = \"EAAOhc6h5nBABOxTTixCeGLdvZBvU7ckBUJSIVwlBfmSZAfeonLm9y0NfoFrDArahJNZCm47JgiBrdIyRebdYlwckZCMRoPx4ZA2gvzOClsJ5GZCBZAjWAmYEshRje4SF3vx4BpR91qPDdHsOu3CHeWUijuRGXex8yXZAgsdEjBi3VqGdTsCXAK6D7A5ZCs8qxsSoO1GtAQK1OMp4LguRZBK9gxCnZAnGR34uEBF3aAKtnehDQYZD\"  # ここにあなたのページアクセストークンを入力\ndef send_message(recipient_id, text):\n    \"\"\"Facebook Messenger に自動返信を送る\"\"\"\n    url = f\"https://graph.facebook.com/v19.0/me/messages?access_token={PAGE_ACCESS_TOKEN}\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"recipient\": {\"id\": recipient_id},\n        \"message\": {\"text\": text}\n    }\n    response = requests.post(url, json=payload, headers=headers)",
        "detail": "facebook-chatbot.app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "facebook-chatbot.app_b",
        "description": "facebook-chatbot.app_b",
        "peekOfCode": "def home():\n    \"\"\"Flask の動作確認用エンドポイント\"\"\"\n    return \"Flask is running!\", 200\n@app.route(\"/webhook\", methods=[\"GET\"])\ndef verify():\n    \"\"\"Facebook Webhook の検証用エンドポイント\"\"\"\n    mode = request.args.get(\"hub.mode\")\n    token = request.args.get(\"hub.verify_token\")\n    challenge = request.args.get(\"hub.challenge\")\n    print(f\"🔍 GETリクエスト受信: mode={mode}, token={token}, challenge={challenge}\")",
        "detail": "facebook-chatbot.app_b",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "facebook-chatbot.app_b",
        "description": "facebook-chatbot.app_b",
        "peekOfCode": "def verify():\n    \"\"\"Facebook Webhook の検証用エンドポイント\"\"\"\n    mode = request.args.get(\"hub.mode\")\n    token = request.args.get(\"hub.verify_token\")\n    challenge = request.args.get(\"hub.challenge\")\n    print(f\"🔍 GETリクエスト受信: mode={mode}, token={token}, challenge={challenge}\")\n    if mode == \"subscribe\" and token == VERIFY_TOKEN:\n        print(\"✅ Webhook Verified!\")\n        return challenge, 200\n    else:",
        "detail": "facebook-chatbot.app_b",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "facebook-chatbot.app_b",
        "description": "facebook-chatbot.app_b",
        "peekOfCode": "app = Flask(__name__)\n# ✅ Webhook の検証トークン（Facebook の設定と一致させる）\nVERIFY_TOKEN = \"1403ad4e4d93d83d317b3a6fbe5d14f1\"\n@app.route(\"/\", methods=[\"GET\"])\ndef home():\n    \"\"\"Flask の動作確認用エンドポイント\"\"\"\n    return \"Flask is running!\", 200\n@app.route(\"/webhook\", methods=[\"GET\"])\ndef verify():\n    \"\"\"Facebook Webhook の検証用エンドポイント\"\"\"",
        "detail": "facebook-chatbot.app_b",
        "documentation": {}
    },
    {
        "label": "VERIFY_TOKEN",
        "kind": 5,
        "importPath": "facebook-chatbot.app_b",
        "description": "facebook-chatbot.app_b",
        "peekOfCode": "VERIFY_TOKEN = \"1403ad4e4d93d83d317b3a6fbe5d14f1\"\n@app.route(\"/\", methods=[\"GET\"])\ndef home():\n    \"\"\"Flask の動作確認用エンドポイント\"\"\"\n    return \"Flask is running!\", 200\n@app.route(\"/webhook\", methods=[\"GET\"])\ndef verify():\n    \"\"\"Facebook Webhook の検証用エンドポイント\"\"\"\n    mode = request.args.get(\"hub.mode\")\n    token = request.args.get(\"hub.verify_token\")",
        "detail": "facebook-chatbot.app_b",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.audio.transcribe",
        "description": "Method.audio.transcribe",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\n# 音声ファイルのパスを指定\naudio_file_path = \"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\dakaretai.mp3\"\n# 音声ファイルを開いてAPIに送信\nwith open(audio_file_path, \"rb\") as audio_file:\n    response = client.audio.transcriptions.create(\n        model=\"whisper-1\",\n        file=audio_file,\n        response_format=\"text\"  # 他に \"json\" も選択可能",
        "detail": "Method.audio.transcribe",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.audio.transcribe",
        "description": "Method.audio.transcribe",
        "peekOfCode": "client = OpenAI()\n# 音声ファイルのパスを指定\naudio_file_path = \"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\dakaretai.mp3\"\n# 音声ファイルを開いてAPIに送信\nwith open(audio_file_path, \"rb\") as audio_file:\n    response = client.audio.transcriptions.create(\n        model=\"whisper-1\",\n        file=audio_file,\n        response_format=\"text\"  # 他に \"json\" も選択可能\n    )",
        "detail": "Method.audio.transcribe",
        "documentation": {}
    },
    {
        "label": "audio_file_path",
        "kind": 5,
        "importPath": "Method.audio.transcribe",
        "description": "Method.audio.transcribe",
        "peekOfCode": "audio_file_path = \"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\dakaretai.mp3\"\n# 音声ファイルを開いてAPIに送信\nwith open(audio_file_path, \"rb\") as audio_file:\n    response = client.audio.transcriptions.create(\n        model=\"whisper-1\",\n        file=audio_file,\n        response_format=\"text\"  # 他に \"json\" も選択可能\n    )\n# 文字起こし結果を表示\nprint(response)",
        "detail": "Method.audio.transcribe",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.chat.completions.ceate",
        "description": "Method.chat.completions.ceate",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\ncompletion = client.chat.completions.create(\n  model=\"gpt-4o\",\n  messages=[\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\nprint(completion.choices[0].message)",
        "detail": "Method.chat.completions.ceate",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.chat.completions.ceate",
        "description": "Method.chat.completions.ceate",
        "peekOfCode": "client = OpenAI()\ncompletion = client.chat.completions.create(\n  model=\"gpt-4o\",\n  messages=[\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\nprint(completion.choices[0].message)",
        "detail": "Method.chat.completions.ceate",
        "documentation": {}
    },
    {
        "label": "completion",
        "kind": 5,
        "importPath": "Method.chat.completions.ceate",
        "description": "Method.chat.completions.ceate",
        "peekOfCode": "completion = client.chat.completions.create(\n  model=\"gpt-4o\",\n  messages=[\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\nprint(completion.choices[0].message)",
        "detail": "Method.chat.completions.ceate",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.completions.create",
        "description": "Method.completions.create",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse=client.completions.create(\n  model=\"gpt-3.5-turbo-instruct\",\n  prompt=\"Say this is a test\",\n  max_tokens=7,\n  temperature=0\n)\nprint(response.choices[0].text)",
        "detail": "Method.completions.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.completions.create",
        "description": "Method.completions.create",
        "peekOfCode": "client = OpenAI()\nresponse=client.completions.create(\n  model=\"gpt-3.5-turbo-instruct\",\n  prompt=\"Say this is a test\",\n  max_tokens=7,\n  temperature=0\n)\nprint(response.choices[0].text)",
        "detail": "Method.completions.create",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Method.create.mask",
        "description": "Method.create.mask",
        "peekOfCode": "image = Image.open(\"input.png\").convert(\"RGB\")\nmask = np.zeros((image.height, image.width), dtype=np.uint8)\n# 例: 画像の中央部分だけを変更したい場合\nh, w = mask.shape\nmask[h//4: 3*h//4, w//4: 3*w//4] = 255  # 中央を白くする\n# マスク画像を保存\nmask_image = Image.fromarray(mask)\nmask_image.save(\"mask.png\")",
        "detail": "Method.create.mask",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 5,
        "importPath": "Method.create.mask",
        "description": "Method.create.mask",
        "peekOfCode": "mask = np.zeros((image.height, image.width), dtype=np.uint8)\n# 例: 画像の中央部分だけを変更したい場合\nh, w = mask.shape\nmask[h//4: 3*h//4, w//4: 3*w//4] = 255  # 中央を白くする\n# マスク画像を保存\nmask_image = Image.fromarray(mask)\nmask_image.save(\"mask.png\")",
        "detail": "Method.create.mask",
        "documentation": {}
    },
    {
        "label": "mask_image",
        "kind": 5,
        "importPath": "Method.create.mask",
        "description": "Method.create.mask",
        "peekOfCode": "mask_image = Image.fromarray(mask)\nmask_image.save(\"mask.png\")",
        "detail": "Method.create.mask",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.edits.create",
        "description": "Method.edits.create",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nimage_path = \"input.png\"\nmask_path = \"mask.png\"\nwith open(image_path, \"rb\") as image, open(mask_path, \"rb\") as mask:\n    response = client.images.edit(\n        model=\"dall-e-3\",\n        image=image,\n        mask=mask,\n        prompt=\"都市の背景を夜景に変更してください。\",",
        "detail": "Method.edits.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.edits.create",
        "description": "Method.edits.create",
        "peekOfCode": "client = OpenAI()\nimage_path = \"input.png\"\nmask_path = \"mask.png\"\nwith open(image_path, \"rb\") as image, open(mask_path, \"rb\") as mask:\n    response = client.images.edit(\n        model=\"dall-e-3\",\n        image=image,\n        mask=mask,\n        prompt=\"都市の背景を夜景に変更してください。\",\n        n=1,",
        "detail": "Method.edits.create",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "Method.edits.create",
        "description": "Method.edits.create",
        "peekOfCode": "image_path = \"input.png\"\nmask_path = \"mask.png\"\nwith open(image_path, \"rb\") as image, open(mask_path, \"rb\") as mask:\n    response = client.images.edit(\n        model=\"dall-e-3\",\n        image=image,\n        mask=mask,\n        prompt=\"都市の背景を夜景に変更してください。\",\n        n=1,\n        size=\"1024x1024\"",
        "detail": "Method.edits.create",
        "documentation": {}
    },
    {
        "label": "mask_path",
        "kind": 5,
        "importPath": "Method.edits.create",
        "description": "Method.edits.create",
        "peekOfCode": "mask_path = \"mask.png\"\nwith open(image_path, \"rb\") as image, open(mask_path, \"rb\") as mask:\n    response = client.images.edit(\n        model=\"dall-e-3\",\n        image=image,\n        mask=mask,\n        prompt=\"都市の背景を夜景に変更してください。\",\n        n=1,\n        size=\"1024x1024\"\n    )",
        "detail": "Method.edits.create",
        "documentation": {}
    },
    {
        "label": "image_url",
        "kind": 5,
        "importPath": "Method.edits.create",
        "description": "Method.edits.create",
        "peekOfCode": "image_url = response.data[0].url\nprint(\"編集された画像のURL:\", image_url)",
        "detail": "Method.edits.create",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.embedding.create",
        "description": "Method.embedding.create",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.embeddings.create(\n    model=\"text-embedding-ada-002\",\n    input=\"スマートシティのメリットとは？\"\n)\n# ベクトルデータを取得\nembedding_vector = response.data[0].embedding\nprint(embedding_vector)\n#print(response)",
        "detail": "Method.embedding.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.embedding.create",
        "description": "Method.embedding.create",
        "peekOfCode": "client = OpenAI()\nresponse = client.embeddings.create(\n    model=\"text-embedding-ada-002\",\n    input=\"スマートシティのメリットとは？\"\n)\n# ベクトルデータを取得\nembedding_vector = response.data[0].embedding\nprint(embedding_vector)\n#print(response)",
        "detail": "Method.embedding.create",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.embedding.create",
        "description": "Method.embedding.create",
        "peekOfCode": "response = client.embeddings.create(\n    model=\"text-embedding-ada-002\",\n    input=\"スマートシティのメリットとは？\"\n)\n# ベクトルデータを取得\nembedding_vector = response.data[0].embedding\nprint(embedding_vector)\n#print(response)",
        "detail": "Method.embedding.create",
        "documentation": {}
    },
    {
        "label": "embedding_vector",
        "kind": 5,
        "importPath": "Method.embedding.create",
        "description": "Method.embedding.create",
        "peekOfCode": "embedding_vector = response.data[0].embedding\nprint(embedding_vector)\n#print(response)",
        "detail": "Method.embedding.create",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.files.delete",
        "description": "Method.files.delete",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nfile_id = \"file-Ad2aQJTLFiSSHGwLkt9C4k\"\nresponse = client.files.delete(file_id)\nprint(f\"ファイル {file_id} の削除結果:\", response.deleted)",
        "detail": "Method.files.delete",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.files.delete",
        "description": "Method.files.delete",
        "peekOfCode": "client = OpenAI()\nfile_id = \"file-Ad2aQJTLFiSSHGwLkt9C4k\"\nresponse = client.files.delete(file_id)\nprint(f\"ファイル {file_id} の削除結果:\", response.deleted)",
        "detail": "Method.files.delete",
        "documentation": {}
    },
    {
        "label": "file_id",
        "kind": 5,
        "importPath": "Method.files.delete",
        "description": "Method.files.delete",
        "peekOfCode": "file_id = \"file-Ad2aQJTLFiSSHGwLkt9C4k\"\nresponse = client.files.delete(file_id)\nprint(f\"ファイル {file_id} の削除結果:\", response.deleted)",
        "detail": "Method.files.delete",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.files.delete",
        "description": "Method.files.delete",
        "peekOfCode": "response = client.files.delete(file_id)\nprint(f\"ファイル {file_id} の削除結果:\", response.deleted)",
        "detail": "Method.files.delete",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.files.list",
        "description": "Method.files.list",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.files.list()\nprint(\"ファイル一覧:\", [file.id for file in response.data])",
        "detail": "Method.files.list",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.files.list",
        "description": "Method.files.list",
        "peekOfCode": "client = OpenAI()\nresponse = client.files.list()\nprint(\"ファイル一覧:\", [file.id for file in response.data])",
        "detail": "Method.files.list",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.files.list",
        "description": "Method.files.list",
        "peekOfCode": "response = client.files.list()\nprint(\"ファイル一覧:\", [file.id for file in response.data])",
        "detail": "Method.files.list",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.files.upload",
        "description": "Method.files.upload",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nwith open(\"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\test.jsonl\", \"rb\") as file:\n    response = client.files.create(\n        file=file,\n        purpose=\"fine-tune\"\n    )\nprint(\"アップロードされたファイルID:\", response.id)",
        "detail": "Method.files.upload",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.files.upload",
        "description": "Method.files.upload",
        "peekOfCode": "client = OpenAI()\nwith open(\"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\test.jsonl\", \"rb\") as file:\n    response = client.files.create(\n        file=file,\n        purpose=\"fine-tune\"\n    )\nprint(\"アップロードされたファイルID:\", response.id)",
        "detail": "Method.files.upload",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.image.generate",
        "description": "Method.image.generate",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.images.generate(\n    model=\"dall-e-3\",\n    prompt=\"2035年千葉県流山市松ヶ丘スマートシティ高層ビル街の街並み、南柏駅も高架線上に存在する、地上40階建てのウラタビルの屋上にウラタとローマ字で書かれている、会社も学校も病院も高層ビルに存在する、ドローンの荷物集配所がある、南西には富士山が見える、30キロ南西にはスカイツリーが見える、自動運転用の高速道路が東京方面に延びている\",\n    size=\"1024x1024\",\n)\nprint(response.data[0].url)",
        "detail": "Method.image.generate",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.image.generate",
        "description": "Method.image.generate",
        "peekOfCode": "client = OpenAI()\nresponse = client.images.generate(\n    model=\"dall-e-3\",\n    prompt=\"2035年千葉県流山市松ヶ丘スマートシティ高層ビル街の街並み、南柏駅も高架線上に存在する、地上40階建てのウラタビルの屋上にウラタとローマ字で書かれている、会社も学校も病院も高層ビルに存在する、ドローンの荷物集配所がある、南西には富士山が見える、30キロ南西にはスカイツリーが見える、自動運転用の高速道路が東京方面に延びている\",\n    size=\"1024x1024\",\n)\nprint(response.data[0].url)",
        "detail": "Method.image.generate",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.image.generate",
        "description": "Method.image.generate",
        "peekOfCode": "response = client.images.generate(\n    model=\"dall-e-3\",\n    prompt=\"2035年千葉県流山市松ヶ丘スマートシティ高層ビル街の街並み、南柏駅も高架線上に存在する、地上40階建てのウラタビルの屋上にウラタとローマ字で書かれている、会社も学校も病院も高層ビルに存在する、ドローンの荷物集配所がある、南西には富士山が見える、30キロ南西にはスカイツリーが見える、自動運転用の高速道路が東京方面に延びている\",\n    size=\"1024x1024\",\n)\nprint(response.data[0].url)",
        "detail": "Method.image.generate",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.images.variations",
        "description": "Method.images.variations",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nwith open(\"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\T.Urata.JPG\", \"rb\") as image:\n    response = client.images.generate(\n        model=\"dall-e-3\",\n        #image=image, # images.variation用\n        prompt=\"この画像を基本に多少イケメン風にして下さい\",\n        n=1,\n        size=\"1024x1024\"\n    )",
        "detail": "Method.images.variations",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.images.variations",
        "description": "Method.images.variations",
        "peekOfCode": "client = OpenAI()\nwith open(\"C:\\\\Users\\\\user\\\\anaconda3\\\\PythonAI\\\\KDP\\\\Method\\\\T.Urata.JPG\", \"rb\") as image:\n    response = client.images.generate(\n        model=\"dall-e-3\",\n        #image=image, # images.variation用\n        prompt=\"この画像を基本に多少イケメン風にして下さい\",\n        n=1,\n        size=\"1024x1024\"\n    )\nimage_url = response.data[0].url",
        "detail": "Method.images.variations",
        "documentation": {}
    },
    {
        "label": "image_url",
        "kind": 5,
        "importPath": "Method.images.variations",
        "description": "Method.images.variations",
        "peekOfCode": "image_url = response.data[0].url\nprint(\"バリエーション画像のURL:\", image_url)",
        "detail": "Method.images.variations",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.models.list",
        "description": "Method.models.list",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.models.list()\nprint(\"利用可能なモデル一覧:\", [model.id for model in response.data])",
        "detail": "Method.models.list",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.models.list",
        "description": "Method.models.list",
        "peekOfCode": "client = OpenAI()\nresponse = client.models.list()\nprint(\"利用可能なモデル一覧:\", [model.id for model in response.data])",
        "detail": "Method.models.list",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.models.list",
        "description": "Method.models.list",
        "peekOfCode": "response = client.models.list()\nprint(\"利用可能なモデル一覧:\", [model.id for model in response.data])",
        "detail": "Method.models.list",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.models.retrieve",
        "description": "Method.models.retrieve",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.models.retrieve(\"gpt-4-turbo\")\nprint(\"GPT-4 Turboの詳細情報:\", response)",
        "detail": "Method.models.retrieve",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.models.retrieve",
        "description": "Method.models.retrieve",
        "peekOfCode": "client = OpenAI()\nresponse = client.models.retrieve(\"gpt-4-turbo\")\nprint(\"GPT-4 Turboの詳細情報:\", response)",
        "detail": "Method.models.retrieve",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.models.retrieve",
        "description": "Method.models.retrieve",
        "peekOfCode": "response = client.models.retrieve(\"gpt-4-turbo\")\nprint(\"GPT-4 Turboの詳細情報:\", response)",
        "detail": "Method.models.retrieve",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.moderation.create",
        "description": "Method.moderation.create",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()from openai import OpenAI\n#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.moderations.create(\n    model=\"text-moderation-latest\",\n    input=\"殺人クラブ\"\n)\n# テキストが危険かどうかを判定\nis_flagged = response.results[0].flagged",
        "detail": "Method.moderation.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.moderation.create",
        "description": "Method.moderation.create",
        "peekOfCode": "client = OpenAI()from openai import OpenAI\n#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.moderations.create(\n    model=\"text-moderation-latest\",\n    input=\"殺人クラブ\"\n)\n# テキストが危険かどうかを判定\nis_flagged = response.results[0].flagged\nprint(f\"このテキストは危険か？: {is_flagged}\")",
        "detail": "Method.moderation.create",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "Method.moderation.create",
        "description": "Method.moderation.create",
        "peekOfCode": "#client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nclient = OpenAI()\nresponse = client.moderations.create(\n    model=\"text-moderation-latest\",\n    input=\"殺人クラブ\"\n)\n# テキストが危険かどうかを判定\nis_flagged = response.results[0].flagged\nprint(f\"このテキストは危険か？: {is_flagged}\")",
        "detail": "Method.moderation.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Method.moderation.create",
        "description": "Method.moderation.create",
        "peekOfCode": "client = OpenAI()\nresponse = client.moderations.create(\n    model=\"text-moderation-latest\",\n    input=\"殺人クラブ\"\n)\n# テキストが危険かどうかを判定\nis_flagged = response.results[0].flagged\nprint(f\"このテキストは危険か？: {is_flagged}\")",
        "detail": "Method.moderation.create",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Method.moderation.create",
        "description": "Method.moderation.create",
        "peekOfCode": "response = client.moderations.create(\n    model=\"text-moderation-latest\",\n    input=\"殺人クラブ\"\n)\n# テキストが危険かどうかを判定\nis_flagged = response.results[0].flagged\nprint(f\"このテキストは危険か？: {is_flagged}\")",
        "detail": "Method.moderation.create",
        "documentation": {}
    },
    {
        "label": "is_flagged",
        "kind": 5,
        "importPath": "Method.moderation.create",
        "description": "Method.moderation.create",
        "peekOfCode": "is_flagged = response.results[0].flagged\nprint(f\"このテキストは危険か？: {is_flagged}\")",
        "detail": "Method.moderation.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.ChatBot.app",
        "description": "OpenAI.ChatBot.app",
        "peekOfCode": "client = OpenAI()\n# 最初にメッセージを表示する\nprint(\"質問を入力してください\")\nconversation_history = [\n{\"role\": \"system\", \"content\":  \"あなたは世界的に有名な詩人です。詩的な比喩表現を使って回答してください\"}\n]\nwhile True:\n    # ユーザーの入力した文字を変数「user_input」に格納\n    user_input = input()\n    # ユーザーの入力した文字が「exit」の場合はループを抜ける",
        "detail": "OpenAI.ChatBot.app",
        "documentation": {}
    },
    {
        "label": "conversation_history",
        "kind": 5,
        "importPath": "OpenAI.ChatBot.app",
        "description": "OpenAI.ChatBot.app",
        "peekOfCode": "conversation_history = [\n{\"role\": \"system\", \"content\":  \"あなたは世界的に有名な詩人です。詩的な比喩表現を使って回答してください\"}\n]\nwhile True:\n    # ユーザーの入力した文字を変数「user_input」に格納\n    user_input = input()\n    # ユーザーの入力した文字が「exit」の場合はループを抜ける\n    if user_input == \"exit\":\n        break\n    conversation_history.append({\"role\": \"user\", \"content\": user_input})",
        "detail": "OpenAI.ChatBot.app",
        "documentation": {}
    },
    {
        "label": "create_context",
        "kind": 2,
        "importPath": "OpenAI.ChatBot.search",
        "description": "OpenAI.ChatBot.search",
        "peekOfCode": "def create_context(question, df, max_len=1800):\n    \"\"\"\n    質問と学習データを比較して、コンテキストを作成する関数\n    \"\"\"\n    # 質問をベクトル化\n    q_embeddings = client.embeddings.create(input=question,model='text-embedding-3-small')['data'][0].embedding\n    # 質問と学習データと比較してコサイン類似度を計算し、\n    # 「distances」という列に類似度を格納\n    df['distances'] = distances_from_embeddings(q_embeddings,df['embeddings'].apply(eval).apply(np.array).values, distance_metric='cosine')\n    # コンテキストを格納するためのリスト",
        "detail": "OpenAI.ChatBot.search",
        "documentation": {}
    },
    {
        "label": "answer_question",
        "kind": 2,
        "importPath": "OpenAI.ChatBot.search",
        "description": "OpenAI.ChatBot.search",
        "peekOfCode": "def answer_question(question, conversation_history):\n    \"\"\"\n    コンテキストに基づいて質問に答える関数\n    \"\"\"\n    # 学習データを読み込む\n    df = pd.read_csv('embeddings.csv', encoding=\"ANSI\")\n    context = create_context (question, df, max_len=200)\n    # プロンプトを作成し、会話の履歴に追加\n    prompt = f\"あなたはとあるホテルのスタッフです。コンテキストに基づいて、お客様からの質問に丁寧に答えてください。コンテキストが質問に対して回答できない場合は「わかりません」と答えてください。\\n\\nコンテキスト: {context}\\n\\n---\\n\\n質問: {question}\\n回答:\"\n    conversation_history.append({\"role\": \"user\", \"content\": prompt})",
        "detail": "OpenAI.ChatBot.search",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.ChatBot.search",
        "description": "OpenAI.ChatBot.search",
        "peekOfCode": "client = OpenAI()\nimport numpy as np\nfrom util import distances_from_embeddings\ndef create_context(question, df, max_len=1800):\n    \"\"\"\n    質問と学習データを比較して、コンテキストを作成する関数\n    \"\"\"\n    # 質問をベクトル化\n    q_embeddings = client.embeddings.create(input=question,model='text-embedding-3-small')['data'][0].embedding\n    # 質問と学習データと比較してコサイン類似度を計算し、",
        "detail": "OpenAI.ChatBot.search",
        "documentation": {}
    },
    {
        "label": "send_alert",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "def send_alert(message):\n    \"\"\" 検出した異常をメールで送信 \"\"\"\n    msg = MIMEText(message)\n    msg[\"Subject\"] = \"【監視カメラアラート】異常検出\"\n    msg[\"From\"] = EMAIL_SENDER\n    msg[\"To\"] = EMAIL_RECEIVER\n    try:\n        # with smtplib.SMTP_SSL(\"mail.biglobe.ne.jp\", 465) as server: SSLの場合\n        with smtplib.SMTP(\"mail.biglobe.ne.jp\", 587) as server:\n            server.starttls()",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n# 🔹 YOLOv8モデルをロード（物体検出用）\nmodel = YOLO(\"yolov8s.pt\")\n# 🔹 カメラを開く（0はデフォルトのカメラ）\ncap = cv2.VideoCapture(0)\nif not cap.isOpened():\n    print(\"カメラが開けませんでした。プログラムを終了します。\")\n    exit()\n# 🔹 監視ログファイルを作成\nlog_file = \"detection_log.txt\"",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "model = YOLO(\"yolov8s.pt\")\n# 🔹 カメラを開く（0はデフォルトのカメラ）\ncap = cv2.VideoCapture(0)\nif not cap.isOpened():\n    print(\"カメラが開けませんでした。プログラムを終了します。\")\n    exit()\n# 🔹 監視ログファイルを作成\nlog_file = \"detection_log.txt\"\nwith open(log_file, \"w\") as f:\n    f.write(\"=== 監視カメラログ ===\\n\")",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "cap = cv2.VideoCapture(0)\nif not cap.isOpened():\n    print(\"カメラが開けませんでした。プログラムを終了します。\")\n    exit()\n# 🔹 監視ログファイルを作成\nlog_file = \"detection_log.txt\"\nwith open(log_file, \"w\") as f:\n    f.write(\"=== 監視カメラログ ===\\n\")\n# 🔹 メール通知設定\nEMAIL_SENDER = \"urata@mtd.biglobe.ne.jp\"",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "log_file",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "log_file = \"detection_log.txt\"\nwith open(log_file, \"w\") as f:\n    f.write(\"=== 監視カメラログ ===\\n\")\n# 🔹 メール通知設定\nEMAIL_SENDER = \"urata@mtd.biglobe.ne.jp\"\nEMAIL_PASSWORD = \"urataaino1\"\nEMAIL_RECEIVER = \"urata@mtd.biglobe.ne.jp\"\ndef send_alert(message):\n    \"\"\" 検出した異常をメールで送信 \"\"\"\n    msg = MIMEText(message)",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "EMAIL_SENDER",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "EMAIL_SENDER = \"urata@mtd.biglobe.ne.jp\"\nEMAIL_PASSWORD = \"urataaino1\"\nEMAIL_RECEIVER = \"urata@mtd.biglobe.ne.jp\"\ndef send_alert(message):\n    \"\"\" 検出した異常をメールで送信 \"\"\"\n    msg = MIMEText(message)\n    msg[\"Subject\"] = \"【監視カメラアラート】異常検出\"\n    msg[\"From\"] = EMAIL_SENDER\n    msg[\"To\"] = EMAIL_RECEIVER\n    try:",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "EMAIL_PASSWORD",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "EMAIL_PASSWORD = \"urataaino1\"\nEMAIL_RECEIVER = \"urata@mtd.biglobe.ne.jp\"\ndef send_alert(message):\n    \"\"\" 検出した異常をメールで送信 \"\"\"\n    msg = MIMEText(message)\n    msg[\"Subject\"] = \"【監視カメラアラート】異常検出\"\n    msg[\"From\"] = EMAIL_SENDER\n    msg[\"To\"] = EMAIL_RECEIVER\n    try:\n        # with smtplib.SMTP_SSL(\"mail.biglobe.ne.jp\", 465) as server: SSLの場合",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "EMAIL_RECEIVER",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "description": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "peekOfCode": "EMAIL_RECEIVER = \"urata@mtd.biglobe.ne.jp\"\ndef send_alert(message):\n    \"\"\" 検出した異常をメールで送信 \"\"\"\n    msg = MIMEText(message)\n    msg[\"Subject\"] = \"【監視カメラアラート】異常検出\"\n    msg[\"From\"] = EMAIL_SENDER\n    msg[\"To\"] = EMAIL_RECEIVER\n    try:\n        # with smtplib.SMTP_SSL(\"mail.biglobe.ne.jp\", 465) as server: SSLの場合\n        with smtplib.SMTP(\"mail.biglobe.ne.jp\", 587) as server:",
        "detail": "OpenAI.SmartCity.BohanKenchi.bohankenchi",
        "documentation": {}
    },
    {
        "label": "CitizenHealth",
        "kind": 6,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "class CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)\n    symptoms = db.Column(db.String(255), nullable=False)\n    medications = db.Column(db.String(255), nullable=False)\n    diagnosis = db.Column(db.String(255), nullable=True)\n    emergency_contact = db.Column(db.String(100), nullable=False)\n    status = db.Column(db.String(50), nullable=True, default=\"未診断\")\nclass Nurse(db.Model):",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "Nurse",
        "kind": 6,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "class Nurse(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    contact = db.Column(db.String(50), nullable=False)\n    specialty = db.Column(db.String(100), nullable=False)\nclass MedicalCenter(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    location = db.Column(db.String(200), nullable=False)\n    contact = db.Column(db.String(50), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "MedicalCenter",
        "kind": 6,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "class MedicalCenter(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    location = db.Column(db.String(200), nullable=False)\n    contact = db.Column(db.String(50), nullable=False)\n# DB 初期化\nwith app.app_context():\n    db.create_all()\n# **健康データ登録**\n@app.route('/health', methods=['GET', 'POST'])",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "register_health",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def register_health():\n    if request.method == 'POST':\n        name = request.form['name']\n        age = request.form['age']\n        symptoms = request.form['symptoms']\n        medications = request.form['medications']\n        emergency_contact = request.form['emergency_contact']\n        new_health = CitizenHealth(name=name, age=age, symptoms=symptoms,\n                                   medications=medications, emergency_contact=emergency_contact)\n        db.session.add(new_health)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "health_list",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def health_list():\n    health_records = CitizenHealth.query.all()\n    return render_template('health_records.html', health_records=health_records)\n# **リアルタイム診断ログを表示**\n@app.route('/logs')\ndef view_logs():\n    with open('healthcare.log', 'r') as file:\n        logs = file.readlines()\n    return render_template('logs.html', logs=logs)\n# **GPT-4o による健康チェック**",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "view_logs",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def view_logs():\n    with open('healthcare.log', 'r') as file:\n        logs = file.readlines()\n    return render_template('logs.html', logs=logs)\n# **GPT-4o による健康チェック**\ndef analyze_health_status(name, age, symptoms):\n    prompt = f\"\"\"\n    {name} さん（{age}歳）の健康状態を評価してください。\n    【症状】{symptoms}\n    診断結果：",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "analyze_health_status",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def analyze_health_status(name, age, symptoms):\n    prompt = f\"\"\"\n    {name} さん（{age}歳）の健康状態を評価してください。\n    【症状】{symptoms}\n    診断結果：\n    - 緊急性: (低 / 中 / 高)\n    - 推奨対応: (例: 医療機関を受診 / 訪問看護師の派遣 / 経過観察)\n    - コメント: (追加のアドバイス)\n    \"\"\"\n    response = client.chat.completions.create(",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "notify_medical_center",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def notify_medical_center(health_data):\n    medical_centers = MedicalCenter.query.all()\n    if not medical_centers:\n        return\n    selected_center = medical_centers[0]\n    log_action(f\"🏥 {health_data.name} さんを {selected_center.name} に連絡\")\n# **訪問看護師を手配**\ndef dispatch_nurse(health_data):\n    nurses = Nurse.query.all()\n    if not nurses:",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "dispatch_nurse",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def dispatch_nurse(health_data):\n    nurses = Nurse.query.all()\n    if not nurses:\n        return\n    nurse = nurses[0]\n    log_action(f\"🚑 {health_data.name} さんに {nurse.name} 看護師を派遣\")\n# **家族へ通知**\ndef notify_family(health_data):\n    log_action(f\"📩 家族へ通知を送信: {health_data.name} さんの健康状態\")\n# **アクションログを記録**",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "notify_family",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def notify_family(health_data):\n    log_action(f\"📩 家族へ通知を送信: {health_data.name} さんの健康状態\")\n# **アクションログを記録**\ndef log_action(message):\n    logging.info(message)\n# **Flaskアプリ起動**\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "log_action",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "def log_action(message):\n    logging.info(message)\n# **Flaskアプリ起動**\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///healthcare.db'\napp.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# ログ設定\nlogging.basicConfig(filename='healthcare.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n# **データベースモデル**\nclass CitizenHealth(db.Model):",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///healthcare.db'\napp.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# ログ設定\nlogging.basicConfig(filename='healthcare.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "app.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# ログ設定\nlogging.basicConfig(filename='healthcare.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "db = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# ログ設定\nlogging.basicConfig(filename='healthcare.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.app",
        "description": "OpenAI.SmartCity.HelthCare.app",
        "peekOfCode": "client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# ログ設定\nlogging.basicConfig(filename='healthcare.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)\n    symptoms = db.Column(db.String(255), nullable=False)\n    medications = db.Column(db.String(255), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.app",
        "documentation": {}
    },
    {
        "label": "analyze_health_status",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "def analyze_health_status():\n    \"\"\"GPT-4o を使って健康状態を解析し、医療機関連携や家族通知の必要性を判断\"\"\"\n    prompt = f\"\"\"\n    以下の健康データを基に、緊急性の有無と適切な対応を判断してください。\n    【健康データ】\n    - 名前: {citizen_health_data[\"name\"]}\n    - 年齢: {citizen_health_data[\"age\"]}\n    - 症状: {', '.join(citizen_health_data['symptoms'])}\n    【診断結果フォーマット】\n    - 緊急性: （低 / 中 / 高）",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "notify_medical_center",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "def notify_medical_center(diagnosis):\n    \"\"\"診断結果が中〜高緊急度の場合、地元医療機関へ通知\"\"\"\n    if \"高\" in diagnosis or \"中\" in diagnosis:\n        selected_center = list(local_medical_centers.keys())[0]  # 仮に最寄りの病院を選択\n        print(f\"\\n🏥 {selected_center} へ通知しました。\")\n        print(f\"連絡先: {local_medical_centers[selected_center]['contact']}\")\n# 🔹 訪問看護師の手配\ndef dispatch_nurse(diagnosis):\n    \"\"\"緊急性が高い場合、訪問看護師を手配\"\"\"\n    if \"高\" in diagnosis:",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "dispatch_nurse",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "def dispatch_nurse(diagnosis):\n    \"\"\"緊急性が高い場合、訪問看護師を手配\"\"\"\n    if \"高\" in diagnosis:\n        nurse = visiting_nurses[0]  # 仮に最初の看護師を選択\n        print(f\"\\n🚑 訪問看護師 {nurse['name']} を手配しました。\")\n        print(f\"連絡先: {nurse['contact']}\")\n# 🔹 家族へ通知（メール送信）\ndef notify_family(diagnosis):\n    \"\"\"緊急性が中〜高のときに家族へメール通知\"\"\"\n    if \"高\" in diagnosis or \"中\" in diagnosis:",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "notify_family",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "def notify_family(diagnosis):\n    \"\"\"緊急性が中〜高のときに家族へメール通知\"\"\"\n    if \"高\" in diagnosis or \"中\" in diagnosis:\n        recipient = citizen_health_data[\"emergency_contact\"]\n        subject = f\"【健康通知】{citizen_health_data['name']} さんの健康状態について\"\n        body = f\"健康診断結果:\\n\\n{diagnosis}\\n\\n適切な対応をお願いします。\"\n        msg = MIMEText(body)\n        msg[\"Subject\"] = subject\n        msg[\"From\"] = \"healthcare@smartcity.com\"\n        msg[\"To\"] = recipient",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "remind_medications",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "def remind_medications():\n    \"\"\"毎日指定の時間に服薬をリマインド\"\"\"\n    now = datetime.now().strftime(\"%H:%M\")\n    for med in citizen_health_data[\"medications\"]:\n        print(f\"🕒 {now} - 服薬リマインド: {med}\")\n# 🔹 スケジューリング（定期実行）\nschedule.every().day.at(\"08:00\").do(remind_medications)  # 朝の服薬リマインド\nschedule.every().day.at(\"20:00\").do(remind_medications)  # 夜の服薬リマインド\n# 🔹 メイン実行\nif __name__ == \"__main__\":",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# ユーザーの健康データ（仮データ）\ncitizen_health_data = {\n    \"user_id\": \"12345\",\n    \"name\": \"田中 一郎\",\n    \"age\": 72,\n    \"symptoms\": [\"微熱 (37.8℃)\", \"血圧が高め (145/90)\", \"咳が続く\", \"倦怠感\"],\n    \"medications\": [\"降圧剤（1日1回 朝）\", \"咳止め（1日2回 朝・夜）\"],\n    \"emergency_contact\": \"family@example.com\",\n    \"location\": \"千葉県柏市\",",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "citizen_health_data",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "citizen_health_data = {\n    \"user_id\": \"12345\",\n    \"name\": \"田中 一郎\",\n    \"age\": 72,\n    \"symptoms\": [\"微熱 (37.8℃)\", \"血圧が高め (145/90)\", \"咳が続く\", \"倦怠感\"],\n    \"medications\": [\"降圧剤（1日1回 朝）\", \"咳止め（1日2回 朝・夜）\"],\n    \"emergency_contact\": \"family@example.com\",\n    \"location\": \"千葉県柏市\",\n}\n# 医療機関データ（仮のデータベース）",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "local_medical_centers",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "local_medical_centers = {\n    \"柏市総合病院\": {\"address\": \"柏市〇〇1-2-3\", \"contact\": \"0471-XXX-XXX\"},\n    \"柏中央クリニック\": {\"address\": \"柏市〇〇4-5-6\", \"contact\": \"0471-YYY-YYY\"},\n}\n# 訪問看護師のリスト（仮データ）\nvisiting_nurses = [\n    {\"name\": \"佐藤 看護師\", \"contact\": \"0471-ABC-DEF\"},\n    {\"name\": \"鈴木 看護師\", \"contact\": \"0471-GHI-JKL\"},\n]\n# 🔹 市民の健康チェック (GPT-4oで分析)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "visiting_nurses",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare",
        "description": "OpenAI.SmartCity.HelthCare.healthcare",
        "peekOfCode": "visiting_nurses = [\n    {\"name\": \"佐藤 看護師\", \"contact\": \"0471-ABC-DEF\"},\n    {\"name\": \"鈴木 看護師\", \"contact\": \"0471-GHI-JKL\"},\n]\n# 🔹 市民の健康チェック (GPT-4oで分析)\ndef analyze_health_status():\n    \"\"\"GPT-4o を使って健康状態を解析し、医療機関連携や家族通知の必要性を判断\"\"\"\n    prompt = f\"\"\"\n    以下の健康データを基に、緊急性の有無と適切な対応を判断してください。\n    【健康データ】",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare",
        "documentation": {}
    },
    {
        "label": "CitizenHealth",
        "kind": 6,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "class CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)\n    symptoms = db.Column(db.String(255), nullable=False)\n    medications = db.Column(db.String(255), nullable=False)\n    diagnosis = db.Column(db.String(255), nullable=True)\n    emergency_contact = db.Column(db.String(100), nullable=False)\nclass Nurse(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "Nurse",
        "kind": 6,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "class Nurse(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    contact = db.Column(db.String(50), nullable=False)\n    specialty = db.Column(db.String(100), nullable=False)\nclass MedicalCenter(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    location = db.Column(db.String(200), nullable=False)\n    contact = db.Column(db.String(50), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "MedicalCenter",
        "kind": 6,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "class MedicalCenter(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    location = db.Column(db.String(200), nullable=False)\n    contact = db.Column(db.String(50), nullable=False)\n# DB 初期化\nwith app.app_context():\n    db.create_all()\n# **看護師の登録ページ**\n@app.route('/nurse', methods=['GET', 'POST'])",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "register_nurse",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def register_nurse():\n    if request.method == 'POST':\n        name = request.form['name']\n        contact = request.form['contact']\n        specialty = request.form['specialty']\n        new_nurse = Nurse(name=name, contact=contact, specialty=specialty)\n        db.session.add(new_nurse)\n        db.session.commit()\n        return redirect(url_for('nurse_list'))\n    return render_template('register_nurse.html')",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "nurse_list",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def nurse_list():\n    nurses = Nurse.query.all()\n    return render_template('nurses.html', nurses=nurses)\n# **医療機関の登録ページ**\n@app.route('/medical_center', methods=['GET', 'POST'])\ndef register_medical_center():\n    if request.method == 'POST':\n        name = request.form['name']\n        location = request.form['location']\n        contact = request.form['contact']",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "register_medical_center",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def register_medical_center():\n    if request.method == 'POST':\n        name = request.form['name']\n        location = request.form['location']\n        contact = request.form['contact']\n        new_center = MedicalCenter(name=name, location=location, contact=contact)\n        db.session.add(new_center)\n        db.session.commit()\n        return redirect(url_for('medical_center_list'))\n    return render_template('register_medical_center.html')",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "medical_center_list",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def medical_center_list():\n    centers = MedicalCenter.query.all()\n    return render_template('medical_centers.html', centers=centers)\n# **健康データ登録**\n@app.route('/health', methods=['GET', 'POST'])\ndef register_health():\n    if request.method == 'POST':\n        name = request.form['name']\n        age = request.form['age']\n        symptoms = request.form['symptoms']",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "register_health",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def register_health():\n    if request.method == 'POST':\n        name = request.form['name']\n        age = request.form['age']\n        symptoms = request.form['symptoms']\n        medications = request.form['medications']\n        emergency_contact = request.form['emergency_contact']\n        new_health = CitizenHealth(name=name, age=age, symptoms=symptoms,\n                                   medications=medications, emergency_contact=emergency_contact)\n        db.session.add(new_health)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "notify_medical_center",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def notify_medical_center(health_data):\n    medical_centers = MedicalCenter.query.all()\n    if not medical_centers:\n        return\n    selected_center = medical_centers[0]  # 最初の登録病院を仮選択\n    print(f\"\\n🏥 {selected_center.name} へ通知しました。（{selected_center.contact}）\")\n# **訪問看護師を手配**\ndef dispatch_nurse(health_data):\n    nurses = Nurse.query.all()\n    if not nurses:",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "dispatch_nurse",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "def dispatch_nurse(health_data):\n    nurses = Nurse.query.all()\n    if not nurses:\n        return\n    nurse = nurses[0]  # 最初の登録看護師を仮選択\n    print(f\"\\n🚑 {nurse.name} 看護師を派遣しました。（{nurse.contact}）\")\n# **Flaskアプリ起動**\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///healthcare.db'\napp.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///healthcare.db'\napp.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "app.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)\n    symptoms = db.Column(db.String(255), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "db = SQLAlchemy(app)\n# OpenAI API 初期化\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)\n    symptoms = db.Column(db.String(255), nullable=False)\n    medications = db.Column(db.String(255), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "description": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "peekOfCode": "client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n# **データベースモデル**\nclass CitizenHealth(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    age = db.Column(db.Integer, nullable=False)\n    symptoms = db.Column(db.String(255), nullable=False)\n    medications = db.Column(db.String(255), nullable=False)\n    diagnosis = db.Column(db.String(255), nullable=True)\n    emergency_contact = db.Column(db.String(100), nullable=False)",
        "detail": "OpenAI.SmartCity.HelthCare.healthcare_w",
        "documentation": {}
    },
    {
        "label": "new_func",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.SogoAnnai.encode",
        "description": "OpenAI.SmartCity.SogoAnnai.encode",
        "peekOfCode": "def new_func(response):\n    print(response.json())\nnew_func(response)",
        "detail": "OpenAI.SmartCity.SogoAnnai.encode",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.encode",
        "description": "OpenAI.SmartCity.SogoAnnai.encode",
        "peekOfCode": "url = \"http://127.0.0.1:5000/chat\"\nheaders = {\"Content-Type\": \"application/json; charset=utf-8\"}\ndata = {\"message\": \"流山市のゴミ収集日は？\"}\nresponse = requests.post(url, headers=headers, data=json.dumps(data, ensure_ascii=False).encode(\"utf-8\"))\ndef new_func(response):\n    print(response.json())\nnew_func(response)",
        "detail": "OpenAI.SmartCity.SogoAnnai.encode",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.encode",
        "description": "OpenAI.SmartCity.SogoAnnai.encode",
        "peekOfCode": "headers = {\"Content-Type\": \"application/json; charset=utf-8\"}\ndata = {\"message\": \"流山市のゴミ収集日は？\"}\nresponse = requests.post(url, headers=headers, data=json.dumps(data, ensure_ascii=False).encode(\"utf-8\"))\ndef new_func(response):\n    print(response.json())\nnew_func(response)",
        "detail": "OpenAI.SmartCity.SogoAnnai.encode",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.encode",
        "description": "OpenAI.SmartCity.SogoAnnai.encode",
        "peekOfCode": "data = {\"message\": \"流山市のゴミ収集日は？\"}\nresponse = requests.post(url, headers=headers, data=json.dumps(data, ensure_ascii=False).encode(\"utf-8\"))\ndef new_func(response):\n    print(response.json())\nnew_func(response)",
        "detail": "OpenAI.SmartCity.SogoAnnai.encode",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.encode",
        "description": "OpenAI.SmartCity.SogoAnnai.encode",
        "peekOfCode": "response = requests.post(url, headers=headers, data=json.dumps(data, ensure_ascii=False).encode(\"utf-8\"))\ndef new_func(response):\n    print(response.json())\nnew_func(response)",
        "detail": "OpenAI.SmartCity.SogoAnnai.encode",
        "documentation": {}
    },
    {
        "label": "chat",
        "kind": 2,
        "importPath": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "description": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "peekOfCode": "def chat():\n    try:\n        # JSONデータをSHIFT_JISで強制デコード\n        data = request.data.decode(\"shift_jis\", errors=\"ignore\")  \n        json_data = json.loads(data)  # JSON デコード\n        if not json_data or \"message\" not in json_data:\n            return app.response_class(\n                response=json.dumps({\"error\": \"Invalid JSON: 'message' field is required\"}, ensure_ascii=False),\n                status=400,\n                mimetype=\"application/json\"",
        "detail": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "description": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "peekOfCode": "app = Flask(__name__)\n# 環境変数からAPI_KEYを取得する\nplus_key = os.environ[\"OPENAI_PLUS_KEY\"]\nclient = openai.Client(api_key=plus_key)\n@app.route(\"/chat\", methods=[\"POST\"])\ndef chat():\n    try:\n        # JSONデータをSHIFT_JISで強制デコード\n        data = request.data.decode(\"shift_jis\", errors=\"ignore\")  \n        json_data = json.loads(data)  # JSON デコード",
        "detail": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "documentation": {}
    },
    {
        "label": "plus_key",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "description": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "peekOfCode": "plus_key = os.environ[\"OPENAI_PLUS_KEY\"]\nclient = openai.Client(api_key=plus_key)\n@app.route(\"/chat\", methods=[\"POST\"])\ndef chat():\n    try:\n        # JSONデータをSHIFT_JISで強制デコード\n        data = request.data.decode(\"shift_jis\", errors=\"ignore\")  \n        json_data = json.loads(data)  # JSON デコード\n        if not json_data or \"message\" not in json_data:\n            return app.response_class(",
        "detail": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "description": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "peekOfCode": "client = openai.Client(api_key=plus_key)\n@app.route(\"/chat\", methods=[\"POST\"])\ndef chat():\n    try:\n        # JSONデータをSHIFT_JISで強制デコード\n        data = request.data.decode(\"shift_jis\", errors=\"ignore\")  \n        json_data = json.loads(data)  # JSON デコード\n        if not json_data or \"message\" not in json_data:\n            return app.response_class(\n                response=json.dumps({\"error\": \"Invalid JSON: 'message' field is required\"}, ensure_ascii=False),",
        "detail": "OpenAI.SmartCity.SogoAnnai.gsupbot",
        "documentation": {}
    },
    {
        "label": "make_tweet",
        "kind": 2,
        "importPath": "OpenAI.TweetAPI.gpt_api",
        "description": "OpenAI.TweetAPI.gpt_api",
        "peekOfCode": "def make_tweet():\n    # ChatGPTに対する命令文を設定\n    request = \"私はIT関係の企業に勤める入社一年目の新入社員です。私に代わってTwitter投稿するツイートを140字以内で作成してください。\\n\\nツイートを作成する際は、以下の文を参考にしてください。\\n\\n\"\n    # 例文として与える投稿文を設定\n    tweet1 = \"例文1：仕事でPythonを使うことになりそうだから、現在勉強中！プログラミグとか難しくてよくわからないよ...\\n\\n\"\n    tweet2 = \"例文2：最近ChatGPTについていろいろ調べてるんだけど、あれってなんでも質に答えてくれてすごいよね！とりあえずPythonを使って、簡単な会話をするプログラムをいてみるつもり。うまくできるかな？\\n\\n \"\n    # 文章を連結して一つの命令文にする\n    content = request + tweet1 + tweet2\n    # ChatGPTにリクエストを送信\n    response = client.chat.completions.create(",
        "detail": "OpenAI.TweetAPI.gpt_api",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.gpt_api",
        "description": "OpenAI.TweetAPI.gpt_api",
        "peekOfCode": "client = OpenAI()\n# ChatGPTにリクエストを送信する関数を定義\ndef make_tweet():\n    # ChatGPTに対する命令文を設定\n    request = \"私はIT関係の企業に勤める入社一年目の新入社員です。私に代わってTwitter投稿するツイートを140字以内で作成してください。\\n\\nツイートを作成する際は、以下の文を参考にしてください。\\n\\n\"\n    # 例文として与える投稿文を設定\n    tweet1 = \"例文1：仕事でPythonを使うことになりそうだから、現在勉強中！プログラミグとか難しくてよくわからないよ...\\n\\n\"\n    tweet2 = \"例文2：最近ChatGPTについていろいろ調べてるんだけど、あれってなんでも質に答えてくれてすごいよね！とりあえずPythonを使って、簡単な会話をするプログラムをいてみるつもり。うまくできるかな？\\n\\n \"\n    # 文章を連結して一つの命令文にする\n    content = request + tweet1 + tweet2",
        "detail": "OpenAI.TweetAPI.gpt_api",
        "documentation": {}
    },
    {
        "label": "tweet",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.tweet",
        "description": "OpenAI.TweetAPI.tweet",
        "peekOfCode": "tweet = gpt_api.make_tweet()\n# Twitterにツイートを投稿\ntwitter_api.post(tweet)",
        "detail": "OpenAI.TweetAPI.tweet",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 2,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "def post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,\n        accessToken,\n        accessTokenSecret\n    )\n    # Tweetを投稿",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "consumerKey",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "consumerKey = os.environ[\"TWITTER_CONSUMER_KEY\"]       # API Key\nconsumerSecret = os.environ[\"TWITTER_CONSUMER_SECRET\"] # API Key Secret\naccessToken = os.environ[\"TWITTER_ACCESS_TOKEN\"]\naccessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "consumerSecret",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "consumerSecret = os.environ[\"TWITTER_CONSUMER_SECRET\"] # API Key Secret\naccessToken = os.environ[\"TWITTER_ACCESS_TOKEN\"]\naccessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "accessToken",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "accessToken = os.environ[\"TWITTER_ACCESS_TOKEN\"]\naccessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "accessTokenSecret",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "accessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,\n        accessToken,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "bearerToken",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "bearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,\n        accessToken,\n        accessTokenSecret",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    }
]