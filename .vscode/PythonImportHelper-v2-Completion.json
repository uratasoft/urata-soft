[
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "answer_question",
        "importPath": "search",
        "description": "search",
        "isExtraImport": true,
        "detail": "search",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "distances_from_embeddings",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "gpt_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gpt_api",
        "description": "gpt_api",
        "detail": "gpt_api",
        "documentation": {}
    },
    {
        "label": "twitter_api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "twitter_api",
        "description": "twitter_api",
        "detail": "twitter_api",
        "documentation": {}
    },
    {
        "label": "tweepy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tweepy",
        "description": "tweepy",
        "detail": "tweepy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.ChatBot.app",
        "description": "OpenAI.ChatBot.app",
        "peekOfCode": "client = OpenAI()\n# 最初にメッセージを表示する\nprint(\"質問を入力してください\")\nconversation_history = [\n{\"role\": \"system\", \"content\":  \"あなたは世界的に有名な詩人です。詩的な比喩表現を使って回答してください\"}\n]\nwhile True:\n    # ユーザーの入力した文字を変数「user_input」に格納\n    user_input = input()\n    # ユーザーの入力した文字が「exit」の場合はループを抜ける",
        "detail": "OpenAI.ChatBot.app",
        "documentation": {}
    },
    {
        "label": "conversation_history",
        "kind": 5,
        "importPath": "OpenAI.ChatBot.app",
        "description": "OpenAI.ChatBot.app",
        "peekOfCode": "conversation_history = [\n{\"role\": \"system\", \"content\":  \"あなたは世界的に有名な詩人です。詩的な比喩表現を使って回答してください\"}\n]\nwhile True:\n    # ユーザーの入力した文字を変数「user_input」に格納\n    user_input = input()\n    # ユーザーの入力した文字が「exit」の場合はループを抜ける\n    if user_input == \"exit\":\n        break\n    conversation_history.append({\"role\": \"user\", \"content\": user_input})",
        "detail": "OpenAI.ChatBot.app",
        "documentation": {}
    },
    {
        "label": "create_context",
        "kind": 2,
        "importPath": "OpenAI.ChatBot.search",
        "description": "OpenAI.ChatBot.search",
        "peekOfCode": "def create_context(question, df, max_len=1800):\n    \"\"\"\n    質問と学習データを比較して、コンテキストを作成する関数\n    \"\"\"\n    # 質問をベクトル化\n    q_embeddings = client.embeddings.create(input=question,model='text-embedding-3-small')['data'][0].embedding\n    # 質問と学習データと比較してコサイン類似度を計算し、\n    # 「distances」という列に類似度を格納\n    df['distances'] = distances_from_embeddings(q_embeddings,df['embeddings'].apply(eval).apply(np.array).values, distance_metric='cosine')\n    # コンテキストを格納するためのリスト",
        "detail": "OpenAI.ChatBot.search",
        "documentation": {}
    },
    {
        "label": "answer_question",
        "kind": 2,
        "importPath": "OpenAI.ChatBot.search",
        "description": "OpenAI.ChatBot.search",
        "peekOfCode": "def answer_question(question, conversation_history):\n    \"\"\"\n    コンテキストに基づいて質問に答える関数\n    \"\"\"\n    # 学習データを読み込む\n    df = pd.read_csv('embeddings.csv', encoding=\"ANSI\")\n    context = create_context (question, df, max_len=200)\n    # プロンプトを作成し、会話の履歴に追加\n    prompt = f\"あなたはとあるホテルのスタッフです。コンテキストに基づいて、お客様からの質問に丁寧に答えてください。コンテキストが質問に対して回答できない場合は「わかりません」と答えてください。\\n\\nコンテキスト: {context}\\n\\n---\\n\\n質問: {question}\\n回答:\"\n    conversation_history.append({\"role\": \"user\", \"content\": prompt})",
        "detail": "OpenAI.ChatBot.search",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.ChatBot.search",
        "description": "OpenAI.ChatBot.search",
        "peekOfCode": "client = OpenAI()\nimport numpy as np\nfrom util import distances_from_embeddings\ndef create_context(question, df, max_len=1800):\n    \"\"\"\n    質問と学習データを比較して、コンテキストを作成する関数\n    \"\"\"\n    # 質問をベクトル化\n    q_embeddings = client.embeddings.create(input=question,model='text-embedding-3-small')['data'][0].embedding\n    # 質問と学習データと比較してコサイン類似度を計算し、",
        "detail": "OpenAI.ChatBot.search",
        "documentation": {}
    },
    {
        "label": "make_tweet",
        "kind": 2,
        "importPath": "OpenAI.TweetAPI.gpt_api",
        "description": "OpenAI.TweetAPI.gpt_api",
        "peekOfCode": "def make_tweet():\n    # ChatGPTに対する命令文を設定\n    request = \"私はIT関係の企業に勤める入社一年目の新入社員です。私に代わってTwitter投稿するツイートを140字以内で作成してください。\\n\\nツイートを作成する際は、以下の文を参考にしてください。\\n\\n\"\n    # 例文として与える投稿文を設定\n    tweet1 = \"例文1：仕事でPythonを使うことになりそうだから、現在勉強中！プログラミグとか難しくてよくわからないよ...\\n\\n\"\n    tweet2 = \"例文2：最近ChatGPTについていろいろ調べてるんだけど、あれってなんでも質に答えてくれてすごいよね！とりあえずPythonを使って、簡単な会話をするプログラムをいてみるつもり。うまくできるかな？\\n\\n \"\n    # 文章を連結して一つの命令文にする\n    content = request + tweet1 + tweet2\n    # ChatGPTにリクエストを送信\n    response = client.chat.completions.create(",
        "detail": "OpenAI.TweetAPI.gpt_api",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.gpt_api",
        "description": "OpenAI.TweetAPI.gpt_api",
        "peekOfCode": "client = OpenAI()\n# ChatGPTにリクエストを送信する関数を定義\ndef make_tweet():\n    # ChatGPTに対する命令文を設定\n    request = \"私はIT関係の企業に勤める入社一年目の新入社員です。私に代わってTwitter投稿するツイートを140字以内で作成してください。\\n\\nツイートを作成する際は、以下の文を参考にしてください。\\n\\n\"\n    # 例文として与える投稿文を設定\n    tweet1 = \"例文1：仕事でPythonを使うことになりそうだから、現在勉強中！プログラミグとか難しくてよくわからないよ...\\n\\n\"\n    tweet2 = \"例文2：最近ChatGPTについていろいろ調べてるんだけど、あれってなんでも質に答えてくれてすごいよね！とりあえずPythonを使って、簡単な会話をするプログラムをいてみるつもり。うまくできるかな？\\n\\n \"\n    # 文章を連結して一つの命令文にする\n    content = request + tweet1 + tweet2",
        "detail": "OpenAI.TweetAPI.gpt_api",
        "documentation": {}
    },
    {
        "label": "tweet",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.tweet",
        "description": "OpenAI.TweetAPI.tweet",
        "peekOfCode": "tweet = gpt_api.make_tweet()\n# Twitterにツイートを投稿\ntwitter_api.post(tweet)",
        "detail": "OpenAI.TweetAPI.tweet",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 2,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "def post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,\n        accessToken,\n        accessTokenSecret\n    )\n    # Tweetを投稿",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "consumerKey",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "consumerKey = os.environ[\"TWITTER_CONSUMER_KEY\"]       # API Key\nconsumerSecret = os.environ[\"TWITTER_CONSUMER_SECRET\"] # API Key Secret\naccessToken = os.environ[\"TWITTER_ACCESS_TOKEN\"]\naccessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "consumerSecret",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "consumerSecret = os.environ[\"TWITTER_CONSUMER_SECRET\"] # API Key Secret\naccessToken = os.environ[\"TWITTER_ACCESS_TOKEN\"]\naccessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "accessToken",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "accessToken = os.environ[\"TWITTER_ACCESS_TOKEN\"]\naccessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "accessTokenSecret",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "accessTokenSecret = os.environ[\"TWITTER_ACCESS_TOKEN_SECRET\"]\nbearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,\n        accessToken,",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    },
    {
        "label": "bearerToken",
        "kind": 5,
        "importPath": "OpenAI.TweetAPI.twitter_api",
        "description": "OpenAI.TweetAPI.twitter_api",
        "peekOfCode": "bearerToken = os.environ[\"TWITTER_BEARER_TOKEN\"]\n# Xに投稿する関数を定義\ndef post(tweet):\n    #tweepy クライアントを作成\n    client = tweepy.Client(\n        bearerToken,\n        consumerKey,\n        consumerSecret,\n        accessToken,\n        accessTokenSecret",
        "detail": "OpenAI.TweetAPI.twitter_api",
        "documentation": {}
    }
]